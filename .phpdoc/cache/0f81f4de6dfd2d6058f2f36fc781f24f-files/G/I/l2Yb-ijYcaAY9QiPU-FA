1743564350
0f81f4de6dfd2d6058f2f36fc781f24f-phpdoc%3A2447ec2786e9ea3d6999ab5df1f8cabd-6838cedc435f9cb1d16a4ecfd47dc6c6
s:17172:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:9:"index.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"6838cedc435f9cb1d16a4ecfd47dc6c6";s:39:" phpDocumentor\Reflection\Php\File path";s:19:"src/views/index.php";s:41:" phpDocumentor\Reflection\Php\File source";s:11982:"<?php ob_start(); ?>

        <div class="container-carousel">
            <h2>Nouveautés</h2>
            <div class="carousel slide" id="myCarousel" data-bs-touch="true" data-bs-ride="carousel"
                data-bs-pause="hover">
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src="./assets/img/nouveautés/Azul-duel.webp" alt="boîte du jeu Azul duel"
                            class="d-block m-auto">
                    </div>
                    <div class="carousel-item">
                        <img src="./assets/img/nouveautés/Cryptic-nature.webp" alt="boîte du jeu Cryptic nature"
                            class="d-block m-auto">
                    </div>
                    <div class="carousel-item">
                        <img src="./assets/img/nouveautés/Evergreen-ext-giant-trees-and-mushrooms.webp"
                            alt="boîte de l'extension de jeu Evergreen giant trees and mushrooms"
                            class="d-block m-auto">
                    </div>
                    <div class="carousel-item">
                        <img src="./assets/img/nouveautés/Flow.webp" alt="boîte du jeu Flow" class="d-block m-auto">
                    </div>
                    <div class="carousel-item">
                        <img src="./assets/img/nouveautés/Fromage.webp" alt="boîte du jeu Fromage"
                            class="d-block m-auto">
                    </div>
                    <div class="carousel-item">
                        <img src="./assets/img/nouveautés/Refuge.webp" alt="boîte du jeu Refuge" class="d-block m-auto">
                    </div>
                    <div class="carousel-item">
                        <img src="./assets/img/nouveautés/The-gang.webp" alt="boîte du jeu The gang"
                            class="d-block m-auto">
                    </div>
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#myCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Précédent</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#myCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Suivant</span>
                </button>
                <br><br>
                <div class="carousel-indicators">
                    <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="0" aria-label="Slide 1"
                        aria-current="true" class="active bg-dark bg-opacity-75"></button>
                    <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="1" aria-label="Slide 1"
                        class="bg-dark bg-opacity-75"></button>
                    <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="2" aria-label="Slide 1"
                        class="bg-dark bg-opacity-75"></button>
                    <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="3" aria-label="Slide 1"
                        class="bg-dark bg-opacity-75"></button>
                    <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="4" aria-label="Slide 1"
                        class="bg-dark bg-opacity-75"></button>
                    <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="5" aria-label="Slide 1"
                        class="bg-dark bg-opacity-75"></button>
                    <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="6" aria-label="Slide 1"
                        class="bg-dark bg-opacity-75"></button>
                </div>
            </div>
        </div>

        <div class="categories">
            <h2>Catégories</h2>
            <div class="row">
                <div class="col-12 col-md-6 col-lg-3 mb-5">
                    <div class="card h-100 shadow p-3 mb-5 bg-white rounded">
                        <div class="card-header text-center fs-5 fw-bold">Pour enfants</div>
                        <div class="card-body d-flex flex-column">
                            <img src="assets/img/categories/Cat_enfants2.png" alt="image de catégorie jeux pour enfants"
                                class="card-img-top">
                            <p class="card-text">Des jeux ludiques et éducatifs pour éveiller l'imagination des plus
                                jeunes tout en s'amusant.</p>
                            <a href="#" class="btn mt-auto">Explorer</a>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mb-5">
                    <div class="card h-100 shadow p-3 mb-5 bg-white rounded">
                        <div class="card-header text-center fs-5 fw-bold">Jeux de cartes</div>
                        <div class="card-body d-flex flex-column">
                            <img src="assets/img/categories/Cat_cartes2.png" alt="image de catégorie jeux de cartes"
                                class="card-img-top">
                            <p class="card-text">Construisez votre stratégie carte après carte dans ces jeux captivants
                                et évolutifs.</p>
                            <a href="#" class="btn mt-auto">Explorer</a>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mb-5">
                    <div class="card h-100 shadow p-3 mb-5 bg-white rounded">
                        <div class="card-header text-center fs-5 fw-bold">Jeux de dés</div>
                        <div class="card-body d-flex flex-column">
                            <img src="assets/img/categories/Cat_des2.png" alt="image de catégorie jeux de dés"
                                class="card-img-top">
                            <p class="card-text">Laissez la chance et la stratégie décider de l'issue avec ces jeux
                                dynamiques basés sur les dés.</p>
                            <a href="#" class="btn mt-auto">Explorer</a>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mb-5">
                    <div class="card h-100 shadow p-3 mb-5 bg-white rounded">
                        <div class="card-header text-center fs-5 fw-bold">Jeux classiques</div>
                        <div class="card-body d-flex flex-column">
                            <img src="assets/img/categories/Cat_classique2.png" alt="image de catégorie jeux classiques"
                                class="card-img-top">
                            <p class="card-text">Redécouvrez les incontournables qui traversent les générations et
                                rassemblent tout le monde.</p>
                            <a href="#" class="btn mt-auto">Explorer</a>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mb-5">
                    <div class="card h-100 shadow p-3 mb-5 bg-white rounded">
                        <div class="card-header text-center fs-5 fw-bold">Jeux de réflexion</div>
                        <div class="card-body d-flex flex-column">
                            <img src="assets/img/categories/Cat_reflexion.webp"
                                alt="image de catégorie jeux de réflexion" class="card-img-top">
                            <p class="card-text">Mettez vos méninges à l'épreuve avec ces défis intellectuels
                                passionants.</p>
                            <a href="#" class="btn mt-auto">Explorer</a>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mb-5">
                    <div class="card h-100 shadow p-3 mb-5 bg-white rounded">
                        <div class="card-header text-center fs-5 fw-bold">Jeux de rôles</div>
                        <div class="card-body d-flex flex-column">
                            <img src="assets/img/categories/Cat_jdr.png" alt="image de catégorie jeux de rôles"
                                class="card-img-top">
                            <p class="card-text">Plongez dans des univers immersifs et incarnez des personnages dans des
                                aventures épiques.</p>
                            <a href="#" class="btn mt-auto">Explorer</a>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mb-5">
                    <div class="card h-100 shadow p-3 mb-5 bg-white rounded">
                        <div class="card-header text-center fs-5 fw-bold">Jeux de stratégie</div>
                        <div class="card-body d-flex flex-column">
                            <img src="assets/img/categories/Cat_strategie2.png"
                                alt="image de catégorie jeux de stratégie" class="card-img-top">
                            <p class="card-text">Planifiez, anticipez et dominez vos adversaires avec ces jeux exigeants
                                et captivants.</p>
                            <a href="#" class="btn mt-auto">Explorer</a>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mb-5">
                    <div class="card h-100 shadow p-3 mb-5 bg-white rounded">
                        <div class="card-header text-center fs-5 fw-bold">Jeux d'ambiance</div>
                        <div class="card-body d-flex flex-column">
                            <img src="assets/img/categories/Cat_ambiance.png" alt="image de catégorie jeux d'ambiance"
                                class="card-img-top">
                            <p class="card-text">Créez des moments inoubliables avec des jeux drôles et interactifs
                                parfaits pour les soirées.</p>
                            <a href="#" class="btn mt-auto">Explorer</a>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mb-5">
                    <div class="card h-100 shadow p-3 mb-5 bg-white rounded">
                        <div class="card-header text-center fs-5 fw-bold">Accessoires</div>
                        <div class="card-body d-flex flex-column">
                            <img src="assets/img/categories/Cat_accessoires.jpg"
                                alt="image de catégorie accessoires de jeu" class="card-img-top">
                            <p class="card-text">Complétez vos parties avec des accessoires essentiels pour une
                                expérience de jeu optimale.</p>
                            <a href="#" class="btn mt-auto">Explorer</a>
                        </div>
                    </div>
                </div>

            </div>
        </div>

<?php 

$content = ob_get_clean();
$defaultDescription = $_SESSION['defaultDescription'];

render('layout', true, [
    'description' => $defaultDescription,
    'title' => "Le Grenier du Joueur - Accueil",
    'css' => ['/lib/bootstrap/css/bootstrap.min.css', '/assets/css/styles.css'],
    'content' => $content,
    'js' => ['/lib/bootstrap/js/bootstrap.bundle.min.js', '/assets/js/main.js', '/assets/js/index_resize-carousel.js']
]);

?>";s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";